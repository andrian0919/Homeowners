@model HomeownersSubdivision.ViewModels.TopicViewModel

@{
    ViewData["Title"] = $"Forum - {Model.Topic.Title}";
}

<div class="container mx-auto px-4 py-8">
    <div class="mb-6">
        <nav class="flex mb-3" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="@Url.Action("Index", "Home")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-indigo-600">
                        <svg class="mr-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                        </svg>
                        Home
                    </a>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <a href="@Url.Action("Index", "Forum")" class="ml-1 text-sm font-medium text-gray-700 hover:text-indigo-600 md:ml-2">
                            Forum
                        </a>
                    </div>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <a href="@Url.Action("Category", "Forum", new { id = Model.Topic.CategoryId })" class="ml-1 text-sm font-medium text-gray-700 hover:text-indigo-600 md:ml-2">
                            @Model.Topic.Category.Name
                        </a>
                    </div>
                </li>
                <li aria-current="page">
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2 truncate max-w-xs">@Model.Topic.Title</span>
                    </div>
                </li>
            </ol>
        </nav>

        <div class="flex flex-col md:flex-row justify-between items-start mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">@Model.Topic.Title</h1>
                <div class="flex items-center mt-2 text-sm text-gray-600">
                    <span>By @Model.Topic.CreatedBy.FullName</span>
                    <span class="mx-2">•</span>
                    <span>@Model.Topic.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    <span class="mx-2">•</span>
                    <span>@Model.Topic.ViewCount views</span>
                    @if (Model.Topic.IsPinned)
                    {
                        <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800">
                            Pinned
                        </span>
                    }
                    @if (Model.Topic.IsLocked)
                    {
                        <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                            Locked
                        </span>
                    }
                </div>
            </div>
            @if (User.IsInRole("Administrator") || User.IsInRole("Staff"))
            {
                <div class="mt-4 md:mt-0 flex space-x-2">
                    <form method="post" action="@Url.Action("PinTopic", "Forum", new { id = Model.Topic.Id })">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            @if (Model.Topic.IsPinned)
                            {
                                <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
                                </svg>
                                <span>Unpin Topic</span>
                            }
                            else
                            {
                                <svg class="-ml-1 mr-2 h-5 w-5 text-amber-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
                                </svg>
                                <span>Pin Topic</span>
                            }
                        </button>
                    </form>
                    <form method="post" action="@Url.Action("LockTopic", "Forum", new { id = Model.Topic.Id })">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            @if (Model.Topic.IsLocked)
                            {
                                <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z" />
                                </svg>
                                <span>Unlock Topic</span>
                            }
                            else
                            {
                                <svg class="-ml-1 mr-2 h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                                </svg>
                                <span>Lock Topic</span>
                            }
                        </button>
                    </form>
                </div>
            }
        </div>
    </div>

    <!-- Posts Section -->
    <div class="mb-8 space-y-6">
        @foreach (var post in Model.Posts)
        {
            <div id="post-@post.Id" class="bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="border-b border-gray-200 bg-gray-50 px-6 py-3 flex justify-between items-center">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full" src="/images/avatar.jpg" alt="@post.CreatedBy.FullName">
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-gray-900">@post.CreatedBy.FullName</p>
                            <div class="flex space-x-2 text-xs text-gray-500">
                                <span>@post.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                @if (post.IsEdited)
                                {
                                    <span>(edited @post.UpdatedAt?.ToString("MMM dd, yyyy HH:mm"))</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center">
                        @if (User.Identity.IsAuthenticated && post.CreatedById.ToString() == User.FindFirst("UserId")?.Value)
                        {
                            <button type="button" onclick="showEditForm(@post.Id)" class="text-gray-400 hover:text-gray-500">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                </svg>
                            </button>
                        }
                    </div>
                </div>
                <div class="p-6">
                    <div id="post-content-@post.Id" class="prose max-w-none">
                        @Html.Raw(post.Content)
                    </div>
                    <div id="post-edit-form-@post.Id" class="hidden mt-4">
                        <form method="post" action="@Url.Action("EditPost", "Forum")">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@post.Id" />
                            <div class="mb-3">
                                <textarea id="edit-content-@post.Id" name="content" rows="5" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">@Html.Raw(post.Content)</textarea>
                            </div>
                            <div class="flex justify-end space-x-2">
                                <button type="button" onclick="hideEditForm(@post.Id)" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Cancel
                                </button>
                                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                    
                    <!-- Reactions -->
                    <div class="mt-4 flex items-center flex-wrap gap-2">
                        @{
                            var reactionTypes = Enum.GetValues(typeof(HomeownersSubdivision.Models.ReactionType)).Cast<HomeownersSubdivision.Models.ReactionType>();
                        }
                        @if (User.Identity.IsAuthenticated)
                        {
                            @foreach (var reactionType in reactionTypes)
                            {
                                var count = post.Reactions.Count(r => r.Type == reactionType);
                                <form method="post" action="@Url.Action("AddReaction", "Forum")" class="inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="postId" value="@post.Id" />
                                    <input type="hidden" name="reactionType" value="@((int)reactionType)" />
                                    <button type="submit" class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 rounded text-xs font-medium @(post.Reactions.Any(r => r.Type == reactionType && r.UserId.ToString() == User.FindFirst("UserId")?.Value) ? "bg-gray-100 text-gray-800" : "bg-white text-gray-700") hover:bg-gray-50">
                                        @GetReactionEmoji(reactionType)
                                        <span class="ml-1">@count</span>
                                    </button>
                                </form>
                            }
                        }
                        else
                        {
                            @foreach (var reactionType in reactionTypes)
                            {
                                var count = post.Reactions.Count(r => r.Type == reactionType);
                                if (count > 0)
                                {
                                    <span class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 rounded text-xs font-medium bg-gray-50 text-gray-700">
                                        @GetReactionEmoji(reactionType)
                                        <span class="ml-1">@count</span>
                                    </span>
                                }
                            }
                        }
                    </div>

                    <!-- Replies to post -->
                    @if (post.Replies.Any())
                    {
                        <div class="mt-4 pl-6 border-l-2 border-gray-100 space-y-4">
                            @foreach (var reply in post.Replies)
                            {
                                <div class="bg-gray-50 rounded-lg p-4">
                                    <div class="flex items-center mb-2">
                                        <div class="flex-shrink-0">
                                            <img class="h-8 w-8 rounded-full" src="/images/avatar.jpg" alt="@reply.CreatedBy.FullName">
                                        </div>
                                        <div class="ml-3">
                                            <p class="text-sm font-medium text-gray-900">@reply.CreatedBy.FullName</p>
                                            <div class="flex space-x-2 text-xs text-gray-500">
                                                <span>@reply.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                                @if (reply.IsEdited)
                                                {
                                                    <span>(edited)</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="prose prose-sm max-w-none">
                                        @Html.Raw(reply.Content)
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <!-- Reply Form -->
    @if (User.Identity.IsAuthenticated && !Model.Topic.IsLocked)
    {
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-4">Post a Reply</h2>
            <form method="post" action="@Url.Action("CreatePost", "Forum")">
                @Html.AntiForgeryToken()
                <input type="hidden" name="TopicId" value="@Model.Topic.Id" />
                <div class="mb-4">
                    <label for="Content" class="sr-only">Content</label>
                    <textarea id="Content" name="Content" rows="5" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Write your reply here..."></textarea>
                </div>
                <div class="flex justify-end">
                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Post Reply
                    </button>
                </div>
            </form>
        </div>
    }
    else if (Model.Topic.IsLocked)
    {
        <div class="bg-amber-50 border border-amber-200 rounded-lg p-4 text-center text-amber-800">
            <svg class="h-6 w-6 text-amber-600 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
            </svg>
            <p>This topic is locked. New replies cannot be posted.</p>
        </div>
    }
    else
    {
        <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center text-gray-600">
            <p>Please <a href="@Url.Action("Login", "Account")" class="text-indigo-600 hover:text-indigo-900">log in</a> to post a reply.</p>
        </div>
    }
</div>

<!-- Alert for messages -->
@if (TempData.ContainsKey("SuccessMessage") || TempData.ContainsKey("ErrorMessage"))
{
    <div id="notification" class="fixed bottom-4 right-4 px-4 py-3 rounded-lg shadow-lg @(TempData.ContainsKey("SuccessMessage") ? "bg-green-50 text-green-800 border border-green-200" : "bg-red-50 text-red-800 border border-red-200")">
        <div class="flex items-center">
            @if (TempData.ContainsKey("SuccessMessage"))
            {
                <svg class="h-5 w-5 text-green-400 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <span>@TempData["SuccessMessage"]</span>
            }
            else
            {
                <svg class="h-5 w-5 text-red-400 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
                <span>@TempData["ErrorMessage"]</span>
            }
        </div>
    </div>

    <script>
        setTimeout(function () {
            var notification = document.getElementById('notification');
            if (notification) {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 1s';
                setTimeout(function () {
                    notification.style.display = 'none';
                }, 1000);
            }
        }, 5000);
    </script>
}

<script>
    function showEditForm(postId) {
        document.getElementById('post-content-' + postId).classList.add('hidden');
        document.getElementById('post-edit-form-' + postId).classList.remove('hidden');
    }

    function hideEditForm(postId) {
        document.getElementById('post-content-' + postId).classList.remove('hidden');
        document.getElementById('post-edit-form-' + postId).classList.add('hidden');
    }
</script>

@functions {
    public string GetReactionEmoji(HomeownersSubdivision.Models.ReactionType reactionType)
    {
        return reactionType switch
        {
            HomeownersSubdivision.Models.ReactionType.Like => "👍",
            HomeownersSubdivision.Models.ReactionType.Dislike => "👎",
            HomeownersSubdivision.Models.ReactionType.Laugh => "😂",
            HomeownersSubdivision.Models.ReactionType.Love => "❤️",
            HomeownersSubdivision.Models.ReactionType.Thanks => "🙏",
            HomeownersSubdivision.Models.ReactionType.Angry => "😡",
            HomeownersSubdivision.Models.ReactionType.Wow => "😮",
            _ => "👍"
        };
    }
} 