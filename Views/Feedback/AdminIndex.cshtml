@model IEnumerable<HomeownersSubdivision.Models.Feedback>

@{
    ViewData["Title"] = "Manage Feedback & Complaints";
}

<style>
    .main-heading {
        display: flex;
        align-items: center;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        background: linear-gradient(to right, #1a1a2e, #3366FF);
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .main-heading i {
        font-size: 1.75rem;
        margin-right: 0.75rem;
        color: #6889F7;
    }
    .luxury-page-container {
        position: relative;
        z-index: 1;
    }
</style>

@await Html.PartialAsync("_LuxuryBackground")

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 luxury-page-container">
    <div class="main-heading mb-4">
        <i class="bi bi-chat-dots"></i> Manage Feedback & Complaints
    </div>
    <p class="text-gray-200 mb-6">Review and respond to homeowner feedback and complaints</p>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-400 p-4 mb-6 rounded-md">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                </div>
            </div>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded-md">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                </div>
            </div>
        </div>
    }

    <!-- Status Filter Tabs -->
    <div class="border-b border-gray-200 mb-6">
        <nav class="-mb-px flex space-x-8" aria-label="Tabs">
            <a href="#all" class="border-primary text-white hover:text-white whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm filter-tab active" data-status="all">
                All Feedback
            </a>
            <a href="#pending" class="border-transparent text-white hover:text-white hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm filter-tab" data-status="pending">
                Pending
            </a>
            <a href="#inprogress" class="border-transparent text-white hover:text-white hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm filter-tab" data-status="inprogress">
                In Progress
            </a>
            <a href="#resolved" class="border-transparent text-white hover:text-white hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm filter-tab" data-status="resolved">
                Resolved
            </a>
            <a href="#rejected" class="border-transparent text-white hover:text-white hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm filter-tab" data-status="rejected">
                Rejected
            </a>
        </nav>
    </div>

    @if (!Model.Any())
    {
        <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6 rounded-md">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-blue-700">
                        No feedback or complaints have been submitted yet.
                    </p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow">
            <table class="min-w-full divide-y divide-gray-200" id="feedbackTable">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted By</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var item in Model)
                    {
                        string rowStatusValue = item.Status.ToString().ToLower();
                        <tr class="hover:bg-gray-50 feedback-row" data-status="@rowStatusValue">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@item.Subject</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    string badgeColor = item.Type switch
                                    {
                                        FeedbackType.Feedback => "bg-blue-100 text-blue-800",
                                        FeedbackType.Complaint => "bg-red-100 text-red-800",
                                        FeedbackType.Suggestion => "bg-green-100 text-green-800",
                                        _ => "bg-gray-100 text-gray-800"
                                    };
                                }
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @badgeColor">
                                    @item.Type
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    string statusBadgeColor = item.Status switch
                                    {
                                        FeedbackStatus.Pending => "bg-yellow-100 text-yellow-800",
                                        FeedbackStatus.InProgress => "bg-blue-100 text-blue-800",
                                        FeedbackStatus.Resolved => "bg-green-100 text-green-800",
                                        FeedbackStatus.Rejected => "bg-red-100 text-red-800",
                                        FeedbackStatus.Closed => "bg-gray-100 text-gray-800",
                                        _ => "bg-gray-100 text-gray-800"
                                    };
                                }
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @statusBadgeColor">
                                    @item.Status
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    string priorityText = item.Priority switch
                                    {
                                        0 => "Low",
                                        1 => "Medium",
                                        2 => "High",
                                        _ => "Low"
                                    };
                                    
                                    string priorityBadgeColor = item.Priority switch
                                    {
                                        0 => "bg-gray-100 text-gray-800",
                                        1 => "bg-yellow-100 text-yellow-800",
                                        2 => "bg-red-100 text-red-800",
                                        _ => "bg-gray-100 text-gray-800"
                                    };
                                }
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @priorityBadgeColor">
                                    @priorityText
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                @item.SubmittedBy?.FullName
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <a asp-action="Details" asp-route-id="@item.Id" class="text-primary hover:text-blue-700 mr-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                                    </svg>
                                    View
                                </a>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="text-indigo-600 hover:text-indigo-900">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                    </svg>
                                    Edit
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="mt-8 flex justify-between">
        <a asp-action="Public" class="text-primary hover:text-blue-700 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
            </svg>
            View Public Feedback
        </a>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get all filter tabs and feedback rows
            const filterTabs = document.querySelectorAll('.filter-tab');
            const feedbackRows = document.querySelectorAll('.feedback-row');
            
            // Add click event listeners to all filter tabs
            filterTabs.forEach(function(tab) {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remove active class from all tabs
                    filterTabs.forEach(function(t) {
                        t.classList.remove('border-primary');
                        t.classList.add('border-transparent');
                    });
                    
                    // Add active class to clicked tab
                    this.classList.remove('border-transparent');
                    this.classList.add('border-primary');
                    
                    // Get the status filter value
                    const status = (this.getAttribute('data-status') || '').toLowerCase();
                    
                    // Filter rows based on status
                    feedbackRows.forEach(function(row) {
                        if (status === 'all') {
                            row.style.display = '';
                        } else {
                            const rowStatus = (row.getAttribute('data-status') || '').toLowerCase();
                            if (rowStatus === status) {
                                row.style.display = '';
                            } else {
                                row.style.display = 'none';
                            }
                        }
                    });
                });
            });
            
            // Let's add diagnostic output to console for debugging
            console.log('Filter tabs:', filterTabs.length);
            console.log('Feedback rows:', feedbackRows.length);
            
            // Also let's check what's in the data-status attributes
            filterTabs.forEach(tab => {
                console.log('Tab data-status:', tab.getAttribute('data-status'));
            });
            
            feedbackRows.forEach(row => {
                console.log('Row data-status:', row.getAttribute('data-status'));
            });
        });
    </script>
} 